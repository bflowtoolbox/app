# $Header: /cvs/fluid/fluid/code/fluid/java/operator/CatchClauses.op,v 1.3 2002/11/22 17:54:06 boyland Exp $
public operator CatchClauses {
  syntax {
    catchClause:CatchClause *
  }
  /** Create the control-flow graph component for a (possibly empty)
   * series of catch clauses.  Each catch clause is wrapped in a variable
   * subcomponent that gives each catch clause a chance at the given
   * exception.  We need three edges between variable subcomponents: <ul>
   * <li> 0 - the current exception is tested here
   * <li> 1 - after an exception is caught, it is passed through here.
   * <li> 2 - abrupt completion of a catch clause goes here. </ul>
   */
  public Component createComponent(IRNode node) {
    return new CatchClausesComponent(node);
  }
}

class CatchClausesComponent extends VariableComponent {
  CatchClausesComponent(IRNode node) {
    super(node,3,1,1,1);

    ControlNode never1 = new Never();
    ControlNode never2 = new Never();
    ControlNode abruptMerge = new Merge();

    ControlEdge startCatch =
      new VariableSubcomponentControlEdge(variable,0,false,entryPort);
    ControlEdge execIn =
      new VariableSubcomponentControlEdge(variable,1,false,never1);
    ControlEdge abruptIn =
      new VariableSubcomponentControlEdge(variable,2,false,never2);

    ControlEdge endCatch =
      new VariableSubcomponentControlEdge(variable,0,true,abruptMerge);
    ControlEdge execOut =
      new VariableSubcomponentControlEdge(variable,1,true,normalExitPort);
    ControlEdge abruptOut =
      new VariableSubcomponentControlEdge(variable,2,true,abruptMerge);

    ControlEdge.connect(abruptMerge,abruptExitPort);
  }

  protected VariableSubcomponent createVariableSubcomponent(IRLocation loc) {
    return new CatchClauseSubcomponent(this,loc);
  }
}

class CatchClauseSubcomponent extends VariableSubcomponent {
  public CatchClauseSubcomponent(Component comp, IRLocation loc) {
    super(comp,loc,3);

    entryPort = new SubcomponentEntryPort(this);
    normalExitPort = new SubcomponentBooleanExitPort(this);
    abruptExitPort = new SubcomponentAbruptExitPort(this);

    ControlNode execMerge = new Merge();
    ControlNode abruptMerge = new Merge();

    ControlEdge findCatch =
      new VariableSubcomponentControlEdge(this,0,true,entryPort);
    ControlEdge inExec =
      new VariableSubcomponentControlEdge(this,1,true,execMerge);
    ControlEdge inAbrupt =
      new VariableSubcomponentControlEdge(this,2,true,abruptMerge);

    ControlEdge.connect(normalExitPort,execMerge);
    ControlEdge.connect(abruptExitPort,abruptMerge);
    
    ControlEdge notCaught =
      new VariableSubcomponentControlEdge(this,0,false,normalExitPort);
    ControlEdge outExec =
      new VariableSubcomponentControlEdge(this,1,false,execMerge);
    ControlEdge outAbrupt =
      new VariableSubcomponentControlEdge(this,2,false,abruptMerge);
  }
}
