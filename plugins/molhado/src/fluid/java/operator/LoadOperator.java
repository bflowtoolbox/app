// Generated by Ant. Do not edit.
package fluid.java.operator;
public class LoadOperator {
  private static AddExpression xAddExpression = AddExpression.prototype;
  private static AllocationExpression xAllocationExpression = AllocationExpression.prototype;
  private static AndExpression xAndExpression = AndExpression.prototype;
  private static AnonClassExpression xAnonClassExpression = AnonClassExpression.prototype;
  private static Arguments xArguments = Arguments.prototype;
  private static ArithBinopExpression xArithBinopExpression = ArithBinopExpression.prototype;
  private static ArithUnopExpression xArithUnopExpression = ArithUnopExpression.prototype;
  private static ArrayCreationExpression xArrayCreationExpression = ArrayCreationExpression.prototype;
  private static ArrayDeclaration xArrayDeclaration = ArrayDeclaration.prototype;
  private static ArrayInitializer xArrayInitializer = ArrayInitializer.prototype;
  private static ArrayRefExpression xArrayRefExpression = ArrayRefExpression.prototype;
  private static ArrayType xArrayType = ArrayType.prototype;
  private static AssertMessageStatement xAssertMessageStatement = AssertMessageStatement.prototype;
  private static AssertStatement xAssertStatement = AssertStatement.prototype;
  private static AssignExpression xAssignExpression = AssignExpression.prototype;
  private static BinopExpression xBinopExpression = BinopExpression.prototype;
  private static BlockStatement xBlockStatement = BlockStatement.prototype;
  private static BooleanLiteral xBooleanLiteral = BooleanLiteral.prototype;
  private static BooleanType xBooleanType = BooleanType.prototype;
  private static BreakStatement xBreakStatement = BreakStatement.prototype;
  private static ByteType xByteType = ByteType.prototype;
  private static CastExpression xCastExpression = CastExpression.prototype;
  private static CatchClause xCatchClause = CatchClause.prototype;
  private static CatchClauses xCatchClauses = CatchClauses.prototype;
  private static CharLiteral xCharLiteral = CharLiteral.prototype;
  private static CharType xCharType = CharType.prototype;
  private static ClassBody xClassBody = ClassBody.prototype;
  private static ClassBodyDeclaration xClassBodyDeclaration = ClassBodyDeclaration.prototype;
  private static ClassDeclaration xClassDeclaration = ClassDeclaration.prototype;
  private static ClassExpression xClassExpression = ClassExpression.prototype;
  private static ClassInitializer xClassInitializer = ClassInitializer.prototype;
  private static CompareExpression xCompareExpression = CompareExpression.prototype;
  private static CompilationUnit xCompilationUnit = CompilationUnit.prototype;
  private static CompiledMethodBody xCompiledMethodBody = CompiledMethodBody.prototype;
  private static ComplementExpression xComplementExpression = ComplementExpression.prototype;
  private static ConditionalAndExpression xConditionalAndExpression = ConditionalAndExpression.prototype;
  private static ConditionalExpression xConditionalExpression = ConditionalExpression.prototype;
  private static ConditionalOrExpression xConditionalOrExpression = ConditionalOrExpression.prototype;
  private static ConstantLabel xConstantLabel = ConstantLabel.prototype;
  private static ConstructionObject xConstructionObject = ConstructionObject.prototype;
  private static ConstructorCall xConstructorCall = ConstructorCall.prototype;
  private static ConstructorDeclaration xConstructorDeclaration = ConstructorDeclaration.prototype;
  private static ContinueStatement xContinueStatement = ContinueStatement.prototype;
  private static CrementExpression xCrementExpression = CrementExpression.prototype;
  private static Declaration xDeclaration = Declaration.prototype;
  private static DeclStatement xDeclStatement = DeclStatement.prototype;
  private static DefaultLabel xDefaultLabel = DefaultLabel.prototype;
  private static DemandName xDemandName = DemandName.prototype;
  private static DimExprs xDimExprs = DimExprs.prototype;
  private static Dims xDims = Dims.prototype;
  private static DivExpression xDivExpression = DivExpression.prototype;
  private static DivRemExpression xDivRemExpression = DivRemExpression.prototype;
  private static DoStatement xDoStatement = DoStatement.prototype;
  private static DoubleType xDoubleType = DoubleType.prototype;
  private static EmptyStatement xEmptyStatement = EmptyStatement.prototype;
  private static EqExpression xEqExpression = EqExpression.prototype;
  private static EqualityExpression xEqualityExpression = EqualityExpression.prototype;
  private static Expression xExpression = Expression.prototype;
  private static ExprStatement xExprStatement = ExprStatement.prototype;
  private static Extensions xExtensions = Extensions.prototype;
  private static FalseExpression xFalseExpression = FalseExpression.prototype;
  private static FieldDeclaration xFieldDeclaration = FieldDeclaration.prototype;
  private static FieldRef xFieldRef = FieldRef.prototype;
  private static Finally xFinally = Finally.prototype;
  private static FloatLiteral xFloatLiteral = FloatLiteral.prototype;
  private static FloatType xFloatType = FloatType.prototype;
  private static ForInit xForInit = ForInit.prototype;
  private static ForStatement xForStatement = ForStatement.prototype;
  private static GreaterThanEqualExpression xGreaterThanEqualExpression = GreaterThanEqualExpression.prototype;
  private static GreaterThanExpression xGreaterThanExpression = GreaterThanExpression.prototype;
  private static IfElseStatement xIfElseStatement = IfElseStatement.prototype;
  private static IfStatement xIfStatement = IfStatement.prototype;
  private static Implements xImplements = Implements.prototype;
  private static ImportDeclaration xImportDeclaration = ImportDeclaration.prototype;
  private static ImportDeclarations xImportDeclarations = ImportDeclarations.prototype;
  private static ImportName xImportName = ImportName.prototype;
  private static Initialization xInitialization = Initialization.prototype;
  private static Initializer xInitializer = Initializer.prototype;
  private static InstanceOfExpression xInstanceOfExpression = InstanceOfExpression.prototype;
  private static InterfaceDeclaration xInterfaceDeclaration = InterfaceDeclaration.prototype;
  private static IntLiteral xIntLiteral = IntLiteral.prototype;
  private static IntType xIntType = IntType.prototype;
  private static LabeledBreakStatement xLabeledBreakStatement = LabeledBreakStatement.prototype;
  private static LabeledContinueStatement xLabeledContinueStatement = LabeledContinueStatement.prototype;
  private static LabeledStatement xLabeledStatement = LabeledStatement.prototype;
  private static LeftShiftExpression xLeftShiftExpression = LeftShiftExpression.prototype;
  private static LessThanEqualExpression xLessThanEqualExpression = LessThanEqualExpression.prototype;
  private static LessThanExpression xLessThanExpression = LessThanExpression.prototype;
  private static LiteralExpression xLiteralExpression = LiteralExpression.prototype;
  private static LogBinopExpression xLogBinopExpression = LogBinopExpression.prototype;
  private static LogUnopExpression xLogUnopExpression = LogUnopExpression.prototype;
  private static LongType xLongType = LongType.prototype;
  private static MethodBody xMethodBody = MethodBody.prototype;
  private static MethodCall xMethodCall = MethodCall.prototype;
  private static MethodDeclaration xMethodDeclaration = MethodDeclaration.prototype;
  private static MinusExpression xMinusExpression = MinusExpression.prototype;
  private static MulExpression xMulExpression = MulExpression.prototype;
  private static NamedPackageDeclaration xNamedPackageDeclaration = NamedPackageDeclaration.prototype;
  private static NamedType xNamedType = NamedType.prototype;
  private static NameExpression xNameExpression = NameExpression.prototype;
  private static NestedClassDeclaration xNestedClassDeclaration = NestedClassDeclaration.prototype;
  private static NestedInterfaceDeclaration xNestedInterfaceDeclaration = NestedInterfaceDeclaration.prototype;
  private static NewExpression xNewExpression = NewExpression.prototype;
  private static NoArrayInitializer xNoArrayInitializer = NoArrayInitializer.prototype;
  private static NoClassBody xNoClassBody = NoClassBody.prototype;
  private static NoFinally xNoFinally = NoFinally.prototype;
  private static NoInitialization xNoInitialization = NoInitialization.prototype;
  private static NoMethodBody xNoMethodBody = NoMethodBody.prototype;
  private static NotEqExpression xNotEqExpression = NotEqExpression.prototype;
  private static NotExpression xNotExpression = NotExpression.prototype;
  private static NullLiteral xNullLiteral = NullLiteral.prototype;
  private static OpAssignExpression xOpAssignExpression = OpAssignExpression.prototype;
  private static OptArrayInitializer xOptArrayInitializer = OptArrayInitializer.prototype;
  private static OptClassBody xOptClassBody = OptClassBody.prototype;
  private static OptFinally xOptFinally = OptFinally.prototype;
  private static OptInitialization xOptInitialization = OptInitialization.prototype;
  private static OptMethodBody xOptMethodBody = OptMethodBody.prototype;
  private static OrExpression xOrExpression = OrExpression.prototype;
  private static PackageDeclaration xPackageDeclaration = PackageDeclaration.prototype;
  private static ParameterDeclaration xParameterDeclaration = ParameterDeclaration.prototype;
  private static Parameters xParameters = Parameters.prototype;
  private static PlusExpression xPlusExpression = PlusExpression.prototype;
  private static PostDecrementExpression xPostDecrementExpression = PostDecrementExpression.prototype;
  private static PostIncrementExpression xPostIncrementExpression = PostIncrementExpression.prototype;
  private static PreDecrementExpression xPreDecrementExpression = PreDecrementExpression.prototype;
  private static PreIncrementExpression xPreIncrementExpression = PreIncrementExpression.prototype;
  private static PrimaryExpression xPrimaryExpression = PrimaryExpression.prototype;
  private static PrimLiteral xPrimLiteral = PrimLiteral.prototype;
  private static QualifiedAllocationExpression xQualifiedAllocationExpression = QualifiedAllocationExpression.prototype;
  private static QualifiedSuperExpression xQualifiedSuperExpression = QualifiedSuperExpression.prototype;
  private static QualifiedThisExpression xQualifiedThisExpression = QualifiedThisExpression.prototype;
  private static RefLiteral xRefLiteral = RefLiteral.prototype;
  private static RelopExpression xRelopExpression = RelopExpression.prototype;
  private static RemExpression xRemExpression = RemExpression.prototype;
  private static ReturnStatement xReturnStatement = ReturnStatement.prototype;
  private static ReturnType xReturnType = ReturnType.prototype;
  private static RightShiftExpression xRightShiftExpression = RightShiftExpression.prototype;
  private static ShiftExpression xShiftExpression = ShiftExpression.prototype;
  private static ShortType xShortType = ShortType.prototype;
  private static Statement xStatement = Statement.prototype;
  private static StatementExpression xStatementExpression = StatementExpression.prototype;
  private static StatementExpressionList xStatementExpressionList = StatementExpressionList.prototype;
  private static StringConcat xStringConcat = StringConcat.prototype;
  private static StringLiteral xStringLiteral = StringLiteral.prototype;
  private static SubExpression xSubExpression = SubExpression.prototype;
  private static SuperExpression xSuperExpression = SuperExpression.prototype;
  private static SwitchBlock xSwitchBlock = SwitchBlock.prototype;
  private static SwitchElement xSwitchElement = SwitchElement.prototype;
  private static SwitchLabel xSwitchLabel = SwitchLabel.prototype;
  private static SwitchStatement xSwitchStatement = SwitchStatement.prototype;
  private static SwitchStatements xSwitchStatements = SwitchStatements.prototype;
  private static SynchronizedStatement xSynchronizedStatement = SynchronizedStatement.prototype;
  private static ThisExpression xThisExpression = ThisExpression.prototype;
  private static Throws xThrows = Throws.prototype;
  private static ThrowStatement xThrowStatement = ThrowStatement.prototype;
  private static TrueExpression xTrueExpression = TrueExpression.prototype;
  private static TryStatement xTryStatement = TryStatement.prototype;
  private static Type xType = Type.prototype;
  private static TypeDeclaration xTypeDeclaration = TypeDeclaration.prototype;
  private static TypeDeclarations xTypeDeclarations = TypeDeclarations.prototype;
  private static TypeDeclarationStatement xTypeDeclarationStatement = TypeDeclarationStatement.prototype;
  private static TypeExpression xTypeExpression = TypeExpression.prototype;
  private static UnnamedPackageDeclaration xUnnamedPackageDeclaration = UnnamedPackageDeclaration.prototype;
  private static UnopExpression xUnopExpression = UnopExpression.prototype;
  private static UnsignedRightShiftExpression xUnsignedRightShiftExpression = UnsignedRightShiftExpression.prototype;
  private static UseExpression xUseExpression = UseExpression.prototype;
  private static VariableDeclaration xVariableDeclaration = VariableDeclaration.prototype;
  private static VariableDeclarator xVariableDeclarator = VariableDeclarator.prototype;
  private static VariableDeclarators xVariableDeclarators = VariableDeclarators.prototype;
  private static VoidReturnStatement xVoidReturnStatement = VoidReturnStatement.prototype;
  private static VoidType xVoidType = VoidType.prototype;
  private static WhileStatement xWhileStatement = WhileStatement.prototype;
  private static XorExpression xXorExpression = XorExpression.prototype;
}
