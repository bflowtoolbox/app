# $Header: /cvs/fluid/fluid/code/fluid/java/operator/ForStatement.op,v 1.6 2002/03/25 20:52:50 elissa Exp $
public operator ForStatement extends Statement {
  syntax {
    "for" "(" <paren> init:ForInit <semi> ";" <li>
              cond:Expression <semi> ";" <li>
              update:StatementExpressionList </paren> ")"
              <forloop> loop:Statement </forloop>
  }
  public Component createComponent(IRNode node) {
    Component comp = new Component(node,1,1,1);
    Subcomponent subinit =
      new Subcomponent(comp,tree.childLocation(node,0),1,1,1);
    Subcomponent subcond = 
      new Subcomponent(comp,tree.childLocation(node,1),1,2,1);
    Subcomponent subcont =
      new Subcomponent(comp,tree.childLocation(node,2),1,1,1);
    Subcomponent subloop = 
      new Subcomponent(comp,tree.childLocation(node,3),1,1,1);
    ControlNode discardTrue = new ComponentFlow(comp,Boolean.TRUE);
    ControlNode discardFalse = new ComponentFlow(comp,Boolean.FALSE);
    ControlNode testMerge = new Merge();
    ControlNode contMerge = new Merge();
    ControlNode endMerge = new Merge();
    ControlNode testBreak = new LabelTest(comp,new AnchoredBreakLabel(node));
    ControlNode testCont = new LabelTest(comp,new AnchoredContinueLabel(node));
    ControlNode abruptMerge1 = new Merge();
    ControlNode abruptMerge2 = new Merge();
    ControlNode abruptMerge3 = new Merge();

    // connect up the loop (normal execution)
    ControlEdge.connect(comp.getEntryPort(),subinit.getEntryPort());
    ControlEdge.connect(subinit.getNormalExitPort(),testMerge);
    ControlEdge.connect(testMerge,subcond.getEntryPort());
    ControlEdge.connect(subcond.getNormalExitPort(),discardTrue);
    ControlEdge.connect(discardTrue,subloop.getEntryPort());
    ControlEdge.connect(subloop.getNormalExitPort(),contMerge);
    ControlEdge.connect(contMerge,subcont.getEntryPort());
    ControlEdge.connect(subcont.getNormalExitPort(),testMerge);
    ControlEdge.connect(subcond.getNormalExitPort(),discardFalse);
    ControlEdge.connect(discardFalse,endMerge);
    ControlEdge.connect(endMerge,comp.getNormalExitPort());

    // connect up abrupt exits (including continue and break tests)
    ControlEdge.connect(subinit.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(subcond.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(subloop.getAbruptExitPort(),testCont);
    ControlEdge.connect(testCont,contMerge);
    ControlEdge.connect(testCont,testBreak);
    ControlEdge.connect(testBreak,endMerge);
    ControlEdge.connect(testBreak,abruptMerge2);
    ControlEdge.connect(subcont.getAbruptExitPort(),abruptMerge2);
    ControlEdge.connect(abruptMerge1,abruptMerge3);
    ControlEdge.connect(abruptMerge2,abruptMerge3);
    ControlEdge.connect(abruptMerge3,comp.getAbruptExitPort());
    return comp;
  }
}
