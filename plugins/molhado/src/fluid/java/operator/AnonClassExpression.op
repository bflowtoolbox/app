# $Header: /cvs/fluid/fluid/code/fluid/java/operator/AnonClassExpression.op,v 1.4 1999/02/18 18:13:14 boyland Exp $

public operator AnonClassExpression extends AllocationExpression 
    implements TypeDeclInterface, Call, DripOperator
{
  syntax {
    "new" type:NamedType args:Arguments body:ClassBody
  }

  public IRNode getActuals(IRNode node) {
    return getArgs(node);
  }

  public Component createComponent(IRNode node) {
    Component comp = new Component(node,1,1,1);
    Subcomponent sub = new Subcomponent(comp,tree.childLocation(node,1),1,1,1);

    ControlNode doAlloc = new ComponentFlow(comp,NewExpression.prototype);
    ControlNode doClose = new ComponentFlow(comp,null);
    ControlNode doCall = new ComponentChoice(comp,prototype);
    ControlNode propagateExceptions = 
      new AddLabel(new CallExceptionLabel(node));
    ControlNode abruptMerge = new Merge();

    ControlEdge.connect(comp.getEntryPort(),doAlloc);
    ControlEdge.connect(doAlloc,sub.getEntryPort());
    ControlEdge.connect(sub.getNormalExitPort(),doClose);
    ControlEdge.connect(doClose,doCall);
    /*!!!!! We need to execute the class initializer, how? */
    ControlEdge.connect(doCall,comp.getNormalExitPort());
    ControlEdge.connect(sub.getAbruptExitPort(),abruptMerge);
    ControlEdge.connect(doCall,propagateExceptions);
    ControlEdge.connect(propagateExceptions,abruptMerge);
    ControlEdge.connect(abruptMerge,comp.getAbruptExitPort());
    
    /* NB: when looking at reads of (final) variables,
     * it is necessary to check the nested class body for uses.
     */

    return comp;
  }
}
