[Task allocation for reengineering OpenOME]

The requirements of OpenOME have been brainstormed between Eric and
me (see the other attachement for discussion notes).  Based on the
cost/effect factors (amount of work versus importance), an initial
task plan is constructed for possibly 5 (teams of) developers.

[Task#1] Documentation help
/* It can help the new developer understand the existing 
   design before doing new design tasks. */
1.1 User's guide
   Provide use cases and scenarios and record abnormalities
   that does not meet the user's expections.
   The user's guide should be tutorial-based, that is, showing
   how a task is performed step-by-step, rather than exhausively
   enumerating all menu/toolbar functions.
1.2 Extension developer's guide
   OpenOME is an effort to integrate with other tools. 
   Currently, various file formats are supported. We need to
   document *how* a format is treated in OpenOME so that other
   tool developers can integrate with our tool, by learning 
   the documentation.
1.3 Comments the code using Javadoc
   The comment should explain the purpose of the method and
   expected input/output (@param). 
   The comments will be used to generate HTML documentation of
   the API and guide the unit test construction.

[Task#2] Ontology-based queries

2.1 Using Protege query plugins to construct meaningful views
    of existing OME graphs  [OpenOME]
2.2 Create queries through examples and logic formla
    [Query, Pal Query]
2.3 Finding commonalities (patterns) of the queries and create
    templates [EzPAL]
2.4 Modify source code of Protege to invoke OpenOME API when 
    there is a change through a synchronizing button. [currently
    OMETab -> Protege is implemented through SaveAction, 
    Protege->OMETab shall be done through OpenAction]
2.5 Generalize the data structure needed for any Protege plugin
    to be synchronized with OMETab.

[Task#3] Performance 
3.1 Profiling the OpenOME on various input sizes to find
    bottleneck of the performance: obtain the computational
    complexity of the method over the input size
3.2 When a bottleneck is found, tune it by
    * remove extra/unnecessary computations
      For example
        ** by remove dead computations
	** by caching intermediate results
    * use more efficient data structures and algorithms
      For example
        ** insert-sort => quicksort
        ** linked list => hash table
3.3 If the performance is not good enough, goto 3.1

[Task#4] Usability

4.1 Zoom in/out
4.2 Thumbnail/bird's eye view
4.3 2D scrolling
4.4 Undo/redo
4.5 Simpilify installation process

See TODO-v2.txt for details.

[Task#5] Web-based knowledge base

5.1 Create a database-based web server to
    upload/download example models
5.2 Modify OpenOME client's file/open and file/save actions
    to allow upload/download of the graph in the buffer
5.3 Using web service to standardize the service's protocol.

See TODO-v2.txt for details.

# vim:tw=69:

